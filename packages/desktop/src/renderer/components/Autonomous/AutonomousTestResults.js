"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutonomousTestResults = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const ErrorDetailModal_1 = require("../Execution/ErrorDetailModal");
const AutonomousTestResults = ({ results, analyses = [], generatedTests = [] }) => {
    const [selectedError, setSelectedError] = (0, react_1.useState)(null);
    const [expandedSections, setExpandedSections] = (0, react_1.useState)({
        failed: true,
        passed: false,
        healed: false
    });
    const toggleSection = (section) => {
        setExpandedSections(prev => ({
            ...prev,
            [section]: !prev[section]
        }));
    };
    const getAnalysisForTest = (testId) => {
        return analyses.find(a => a.testId === testId);
    };
    const getTestName = (testId) => {
        const test = generatedTests.find(t => t.id === testId);
        return test?.name || testId;
    };
    const openErrorDetail = (test) => {
        const analysis = getAnalysisForTest(test.testId);
        setSelectedError({
            testId: test.testId,
            testName: getTestName(test.testId),
            status: test.status,
            duration: test.duration,
            error: test.error,
            screenshots: test.screenshots,
            video: test.video,
            analysis
        });
    };
    const total = results.passed.length + results.failed.length + results.healed.length;
    const passRate = total > 0 ? Math.round((results.passed.length / total) * 100) : 0;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-4", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-bold mb-2", children: "Test Execution Results" }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-between", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-6", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm text-blue-100", children: "Total Tests" }), (0, jsx_runtime_1.jsx)("div", { className: "text-3xl font-bold", children: total })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm text-blue-100", children: "Pass Rate" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-3xl font-bold", children: [passRate, "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm text-blue-100", children: "Duration" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-3xl font-bold", children: [(results.totalDuration / 1000).toFixed(1), "s"] })] })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-3 gap-4 p-6 border-b border-gray-200", children: [(0, jsx_runtime_1.jsx)("div", { className: "bg-green-50 border border-green-200 rounded-lg p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm font-medium text-green-800 mb-1", children: "Passed" }), (0, jsx_runtime_1.jsx)("div", { className: "text-3xl font-bold text-green-900", children: results.passed.length })] }), (0, jsx_runtime_1.jsx)("div", { className: "bg-green-100 rounded-full p-3", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-8 h-8 text-green-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) }) })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm font-medium text-red-800 mb-1", children: "Failed" }), (0, jsx_runtime_1.jsx)("div", { className: "text-3xl font-bold text-red-900", children: results.failed.length })] }), (0, jsx_runtime_1.jsx)("div", { className: "bg-red-100 rounded-full p-3", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-8 h-8 text-red-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" }) }) })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "bg-orange-50 border border-orange-200 rounded-lg p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: "text-sm font-medium text-orange-800 mb-1", children: "Healed" }), (0, jsx_runtime_1.jsx)("div", { className: "text-3xl font-bold text-orange-900", children: results.healed.length })] }), (0, jsx_runtime_1.jsx)("div", { className: "bg-orange-100 rounded-full p-3", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-8 h-8 text-orange-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 6v6m0 0v6m0-6h6m-6 0H6" }) }) })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "p-6 space-y-4", children: [results.failed.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "border border-red-200 rounded-lg overflow-hidden", children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => toggleSection('failed'), className: "w-full bg-red-50 px-4 py-3 flex items-center justify-between hover:bg-red-100 transition-colors", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-5 h-5 text-red-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" }) }), (0, jsx_runtime_1.jsxs)("span", { className: "font-semibold text-red-900", children: ["Failed Tests (", results.failed.length, ")"] })] }), (0, jsx_runtime_1.jsx)("svg", { className: `w-5 h-5 text-red-600 transition-transform ${expandedSections.failed ? 'rotate-180' : ''}`, fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) })] }), expandedSections.failed && ((0, jsx_runtime_1.jsx)("div", { className: "divide-y divide-red-100", children: results.failed.map((test, index) => {
                                    const analysis = getAnalysisForTest(test.testId);
                                    return ((0, jsx_runtime_1.jsx)("div", { className: "px-4 py-3 bg-white hover:bg-red-50 transition-colors cursor-pointer", onClick: () => openErrorDetail(test), children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3 mb-1", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900", children: getTestName(test.testId) }), analysis && ((0, jsx_runtime_1.jsx)("span", { className: "px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800", children: analysis.category.replace('_', ' ') }))] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-700 line-clamp-1", children: test.error || 'Unknown error' }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4 mt-2 text-xs text-gray-600", children: [(0, jsx_runtime_1.jsxs)("span", { children: ["\u23F1\uFE0F ", test.duration, "ms"] }), test.screenshots && test.screenshots.length > 0 && ((0, jsx_runtime_1.jsxs)("span", { children: ["\uD83D\uDCF8 ", test.screenshots.length, " screenshots"] })), test.video && (0, jsx_runtime_1.jsx)("span", { children: "\uD83D\uDCF9 Video available" })] })] }), (0, jsx_runtime_1.jsx)("button", { className: "ml-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors text-sm font-medium", children: "View Details" })] }) }, index));
                                }) }))] })), results.healed.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "border border-orange-200 rounded-lg overflow-hidden", children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => toggleSection('healed'), className: "w-full bg-orange-50 px-4 py-3 flex items-center justify-between hover:bg-orange-100 transition-colors", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-5 h-5 text-orange-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 6v6m0 0v6m0-6h6m-6 0H6" }) }), (0, jsx_runtime_1.jsxs)("span", { className: "font-semibold text-orange-900", children: ["Self-Healed Tests (", results.healed.length, ")"] })] }), (0, jsx_runtime_1.jsx)("svg", { className: `w-5 h-5 text-orange-600 transition-transform ${expandedSections.healed ? 'rotate-180' : ''}`, fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) })] }), expandedSections.healed && ((0, jsx_runtime_1.jsx)("div", { className: "divide-y divide-orange-100", children: results.healed.map((test, index) => ((0, jsx_runtime_1.jsx)("div", { className: "px-4 py-3 bg-white hover:bg-orange-50 transition-colors cursor-pointer", onClick: () => openErrorDetail(test), children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900 mb-1", children: getTestName(test.testId) }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-orange-700", children: "Test was automatically healed during execution" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4 mt-2 text-xs text-gray-600", children: [(0, jsx_runtime_1.jsxs)("span", { children: ["\u23F1\uFE0F ", test.duration, "ms"] }), test.video && (0, jsx_runtime_1.jsx)("span", { children: "\uD83D\uDCF9 Video available" })] })] }), (0, jsx_runtime_1.jsx)("button", { className: "ml-4 px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors text-sm font-medium", children: "View Details" })] }) }, index))) }))] })), results.passed.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "border border-green-200 rounded-lg overflow-hidden", children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => toggleSection('passed'), className: "w-full bg-green-50 px-4 py-3 flex items-center justify-between hover:bg-green-100 transition-colors", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-5 h-5 text-green-600", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M5 13l4 4L19 7" }) }), (0, jsx_runtime_1.jsxs)("span", { className: "font-semibold text-green-900", children: ["Passed Tests (", results.passed.length, ")"] })] }), (0, jsx_runtime_1.jsx)("svg", { className: `w-5 h-5 text-green-600 transition-transform ${expandedSections.passed ? 'rotate-180' : ''}`, fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) })] }), expandedSections.passed && ((0, jsx_runtime_1.jsxs)("div", { className: "divide-y divide-green-100", children: [results.passed.slice(0, 10).map((test, index) => ((0, jsx_runtime_1.jsx)("div", { className: "px-4 py-3 bg-white hover:bg-green-50 transition-colors", children: (0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-between", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex-1", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900 mb-1", children: getTestName(test.testId) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4 text-xs text-gray-600", children: [(0, jsx_runtime_1.jsxs)("span", { children: ["\u23F1\uFE0F ", test.duration, "ms"] }), (0, jsx_runtime_1.jsx)("span", { className: "text-green-600 font-medium", children: "\u2713 Passed" })] })] }) }) }, index))), results.passed.length > 10 && ((0, jsx_runtime_1.jsxs)("div", { className: "px-4 py-3 bg-gray-50 text-center text-sm text-gray-600", children: ["... and ", results.passed.length - 10, " more passed tests"] }))] }))] }))] }), selectedError && ((0, jsx_runtime_1.jsx)(ErrorDetailModal_1.ErrorDetailModal, { error: selectedError, onClose: () => setSelectedError(null) }))] }));
};
exports.AutonomousTestResults = AutonomousTestResults;
//# sourceMappingURL=AutonomousTestResults.js.map