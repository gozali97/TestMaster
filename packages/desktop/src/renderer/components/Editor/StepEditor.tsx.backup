import { useState, useEffect } from 'react';
import { SelectorBuilder } from './SelectorBuilder';
import './StepEditor.css';

export interface TestStep {
  id: string;
  action: string;
  locator?: string;
  value?: string;
  description?: string;
  timeout?: number;
  assertionType?: string;
  enabled?: boolean;
  waitCondition?: string;
  screenshot?: string;
  scrollIntoView?: boolean;
  customProperties?: Record<string, any>;
}

interface StepEditorProps {
  step: TestStep | null;
  onSave: (step: TestStep) => void;
  onCancel: () => void;
  variables?: string[];
}

export const StepEditor = ({ step, onSave, onCancel, variables = [] }: StepEditorProps) => {
  const [formData, setFormData] = useState<TestStep>({
    id: '',
    action: 'navigate',
    enabled: true,
  });
  const [showSelectorBuilder, setShowSelectorBuilder] = useState(false);

  useEffect(() => {
    if (step) {
      setFormData(step);
    } else {
      setFormData({
        id: Date.now().toString(),
        action: 'navigate',
        enabled: true,
      });
    }
  }, [step]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  const updateField = (field: keyof TestStep, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const actionTypes = [
    { value: 'navigate', label: 'Navigate', needsValue: true, needsLocator: false },
    { value: 'click', label: 'Click', needsValue: false, needsLocator: true },
    { value: 'doubleClick', label: 'Double Click', needsValue: false, needsLocator: true },
    { value: 'rightClick', label: 'Right Click', needsValue: false, needsLocator: true },
    { value: 'hover', label: 'Hover', needsValue: false, needsLocator: true },
    { value: 'type', label: 'Type Text', needsValue: true, needsLocator: true },
    { value: 'fill', label: 'Fill Input', needsValue: true, needsLocator: true },
    { value: 'clear', label: 'Clear Input', needsValue: false, needsLocator: true },
    { value: 'press', label: 'Press Key', needsValue: true, needsLocator: false },
    { value: 'select', label: 'Select Option', needsValue: true, needsLocator: true },
    { value: 'check', label: 'Check Checkbox', needsValue: false, needsLocator: true },
    { value: 'uncheck', label: 'Uncheck Checkbox', needsValue: false, needsLocator: true },
    { value: 'upload', label: 'Upload File', needsValue: true, needsLocator: true },
    { value: 'dragDrop', label: 'Drag and Drop', needsValue: true, needsLocator: true },
    { value: 'scroll', label: 'Scroll', needsValue: true, needsLocator: false },
    { value: 'scrollToElement', label: 'Scroll to Element', needsValue: false, needsLocator: true },
    { value: 'wait', label: 'Wait', needsValue: true, needsLocator: false },
    { value: 'waitForElement', label: 'Wait for Element', needsValue: false, needsLocator: true },
    { value: 'waitForText', label: 'Wait for Text', needsValue: true, needsLocator: true },
    { value: 'screenshot', label: 'Take Screenshot', needsValue: true, needsLocator: false },
    { value: 'assert', label: 'Assert Visible', needsValue: false, needsLocator: true },
    { value: 'assertText', label: 'Assert Text', needsValue: true, needsLocator: true },
    { value: 'assertValue', label: 'Assert Value', needsValue: true, needsLocator: true },
    { value: 'assertAttribute', label: 'Assert Attribute', needsValue: true, needsLocator: true },
    { value: 'assertCount', label: 'Assert Count', needsValue: true, needsLocator: true },
    { value: 'assertUrl', label: 'Assert URL', needsValue: true, needsLocator: false },
    { value: 'assertTitle', label: 'Assert Title', needsValue: true, needsLocator: false },
    { value: 'executeScript', label: 'Execute JavaScript', needsValue: true, needsLocator: false },
    { value: 'refresh', label: 'Refresh Page', needsValue: false, needsLocator: false },
    { value: 'goBack', label: 'Go Back', needsValue: false, needsLocator: false },
    { value: 'goForward', label: 'Go Forward', needsValue: false, needsLocator: false },
    { value: 'closeTab', label: 'Close Tab', needsValue: false, needsLocator: false },
    { value: 'switchTab', label: 'Switch Tab', needsValue: true, needsLocator: false },
    { value: 'switchFrame', label: 'Switch Frame', needsValue: false, needsLocator: true },
    { value: 'handleAlert', label: 'Handle Alert', needsValue: true, needsLocator: false },
    { value: 'extractText', label: 'Extract Text', needsValue: true, needsLocator: true },
    { value: 'extractAttribute', label: 'Extract Attribute', needsValue: true, needsLocator: true },
  ];

  const currentActionConfig = actionTypes.find(a => a.value === formData.action);

  const locatorStrategies = [
    { value: 'css', label: 'CSS Selector' },
    { value: 'xpath', label: 'XPath' },
    { value: 'id', label: 'ID' },
    { value: 'text', label: 'Text' },
    { value: 'placeholder', label: 'Placeholder' },
    { value: 'role', label: 'Role' },
    { value: 'testid', label: 'Test ID' },
  ];

  return (
    <div className="step-editor-overlay" onClick={onCancel}>
      <div className="step-editor-modal" onClick={(e) => e.stopPropagation()}>
        <div className="step-editor-header">
          <h3>{step ? 'Edit Test Step' : 'Add Test Step'}</h3>
          <button className="close-btn" onClick={onCancel}>Ã—</button>
        </div>

        <form onSubmit={handleSubmit} className="step-editor-form">
          <div className="form-group">
            <label>Action Type *</label>
            <select
              value={formData.action}
              onChange={(e) => updateField('action', e.target.value)}
              required
            >
              {actionTypes.map(action => (
                <option key={action.value} value={action.value}>
                  {action.label}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label>Description</label>
            <input
              type="text"
              value={formData.description || ''}
              onChange={(e) => updateField('description', e.target.value)}
              placeholder="Brief description of this step"
            />
          </div>

          {currentActionConfig?.needsLocator && (
            <>
              <div className="form-group">
                <label>Element Locator *</label>
                <div className="locator-input-group">
                  <input
                    type="text"
                    value={formData.locator || ''}
                    onChange={(e) => updateField('locator', e.target.value)}
                    placeholder="#button-id or //button[@id='submit']"
                    required
                  />
                  <button 
                    type="button" 
                    className="selector-builder-btn"
                    title="Open Selector Builder"
                    onClick={() => setShowSelectorBuilder(true)}
                  >
                    ðŸŽ¯
                  </button>
                </div>
                <small>Use CSS selector, XPath, or Playwright locator syntax</small>
              </div>

              <div className="form-group checkbox-group">
                <label>
                  <input
                    type="checkbox"
                    checked={formData.scrollIntoView || false}
                    onChange={(e) => updateField('scrollIntoView', e.target.checked)}
                  />
                  Scroll element into view before action
                </label>
              </div>
            </>
          )}

          {currentActionConfig?.needsValue && (
            <div className="form-group">
              <label>Value *</label>
              <input
                type="text"
                value={formData.value || ''}
                onChange={(e) => updateField('value', e.target.value)}
                placeholder={
                  formData.action === 'navigate' ? 'https://example.com' :
                  formData.action === 'wait' ? '3000 (milliseconds)' :
                  formData.action === 'screenshot' ? 'screenshot-name' :
                  'Enter value'
                }
                required
              />
              {variables.length > 0 && (
                <small>
                  Available variables: {variables.map(v => `{{${v}}}`).join(', ')}
                </small>
              )}
            </div>
          )}

          {formData.action.startsWith('assert') && (
            <div className="form-group">
              <label>Assertion Type</label>
              <select
                value={formData.assertionType || 'equals'}
                onChange={(e) => updateField('assertionType', e.target.value)}
              >
                <option value="equals">Equals</option>
                <option value="contains">Contains</option>
                <option value="startsWith">Starts With</option>
                <option value="endsWith">Ends With</option>
                <option value="matches">Matches Regex</option>
                <option value="notEquals">Not Equals</option>
              </select>
            </div>
          )}

          {formData.action.startsWith('wait') && (
            <div className="form-group">
              <label>Wait Condition</label>
              <select
                value={formData.waitCondition || 'visible'}
                onChange={(e) => updateField('waitCondition', e.target.value)}
              >
                <option value="visible">Visible</option>
                <option value="hidden">Hidden</option>
                <option value="attached">Attached</option>
                <option value="detached">Detached</option>
                <option value="stable">Stable</option>
              </select>
            </div>
          )}

          <div className="form-group">
            <label>Timeout (ms)</label>
            <input
              type="number"
              value={formData.timeout || 30000}
              onChange={(e) => updateField('timeout', parseInt(e.target.value))}
              min="0"
              step="1000"
            />
          </div>

          <div className="form-group checkbox-group">
            <label>
              <input
                type="checkbox"
                checked={formData.enabled !== false}
                onChange={(e) => updateField('enabled', e.target.checked)}
              />
              Enabled (uncheck to skip this step)
            </label>
          </div>

          <div className="form-actions">
            <button type="button" onClick={onCancel} className="btn-cancel">
              Cancel
            </button>
            <button type="submit" className="btn-save">
              {step ? 'Update Step' : 'Add Step'}
            </button>
          </div>
        </form>
      </div>

      {showSelectorBuilder && (
        <SelectorBuilder
          initialSelector={formData.locator || ''}
          onSave={(selector) => {
            updateField('locator', selector);
            setShowSelectorBuilder(false);
          }}
          onCancel={() => setShowSelectorBuilder(false)}
        />
      )}
    </div>
  );
};
